---
title: "Capstone"
author: "Gustavo Roa"
format: html
---

## Project Overview: MovieLens

For this project, you will be creating a movie recommendation system using the MovieLens dataset. The version of movielens included in the dslabs package (which was used for some of the exercises in PH125.8x: Data Science: Machine Learning) is just a small subset of a much larger dataset with millions of ratings. You can find the entire latest MovieLens dataset here External link. You will be creating your own recommendation system using all the tools we have shown you throughout the courses in this series. We will use the 10M version of the MovieLens dataset External link to make the computation a little easier.

You will download the MovieLens data and run code we will provide to generate your datasets.

First, there will be a short quiz on the MovieLens data. You can view this quiz as an opportunity to familiarize yourself with the data in order to prepare for your project submission.

Second, you will train a machine learning algorithm using the inputs in one subset to predict movie ratings in the validation set. Your project itself will be assessed by peer grading.

## Create Train and Final Hold-out Test Sets

### Introduction

You will use the following code to generate your datasets. Develop your algorithm using the edx set. For a final test of your final algorithm, predict movie ratings in the final_holdout_test set as if they were unknown. RMSE will be used to evaluate how close your predictions are to the true values in the final_holdout_test set.

Important: The final_holdout_test data should NOT be used for training, developing, or selecting your algorithm and it should ONLY be used for evaluating the RMSE of your final algorithm. The final_holdout_test set should only be used at the end of your project with your final model. It may not be used to test the RMSE of multiple models during model development. You should split the edx data into separate training and test sets and/or use cross-validation to design and test your algorithm.

Also remember that by accessing this site, you are agreeing to the terms of the edX Honor Code. This means you are expected to submit your own work and can be removed from the course for substituting another student's work as your own.

Create edx and final_holdout_test sets

```{r}
##########################################################
# Create edx and final_holdout_test sets 
##########################################################

# Note: this process could take a couple of minutes

if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")

library(tidyverse)
library(caret)

# MovieLens 10M dataset:
# https://grouplens.org/datasets/movielens/10m/
# http://files.grouplens.org/datasets/movielens/ml-10m.zip

options(timeout = 120)

dl <- "ml-10M100K.zip"
if(!file.exists(dl))
  download.file("https://files.grouplens.org/datasets/movielens/ml-10m.zip", dl)

ratings_file <- "ml-10M100K/ratings.dat"
if(!file.exists(ratings_file))
  unzip(dl, ratings_file)

movies_file <- "ml-10M100K/movies.dat"
if(!file.exists(movies_file))
  unzip(dl, movies_file)

ratings <- as.data.frame(str_split(read_lines(ratings_file), fixed("::"), simplify = TRUE),
                         stringsAsFactors = FALSE)
colnames(ratings) <- c("userId", "movieId", "rating", "timestamp")
ratings <- ratings %>%
  mutate(userId = as.integer(userId),
         movieId = as.integer(movieId),
         rating = as.numeric(rating),
         timestamp = as.integer(timestamp))

movies <- as.data.frame(str_split(read_lines(movies_file), fixed("::"), simplify = TRUE),
                        stringsAsFactors = FALSE)
colnames(movies) <- c("movieId", "title", "genres")
movies <- movies %>%
  mutate(movieId = as.integer(movieId))

movielens <- left_join(ratings, movies, by = "movieId")

# Final hold-out test set will be 10% of MovieLens data
set.seed(1, sample.kind="Rounding") # if using R 3.6 or later
# set.seed(1) # if using R 3.5 or earlier
test_index <- createDataPartition(y = movielens$rating, times = 1, p = 0.1, list = FALSE)
edx <- movielens[-test_index,]
temp <- movielens[test_index,]

# Make sure userId and movieId in final hold-out test set are also in edx set
final_holdout_test <- temp %>% 
  semi_join(edx, by = "movieId") %>%
  semi_join(edx, by = "userId")

# Add rows removed from final hold-out test set back into edx set
removed <- anti_join(temp, final_holdout_test)
edx <- rbind(edx, removed)

rm(dl, ratings, movies, test_index, temp, movielens, removed)

```

### Quiz: MovieLens Dataset

```{r}
# Q1 
dim(edx)
nrow(edx)

# Q2

# Counting the number of zero ratings in the edx dataset
zeros_count <- sum(edx$rating == 0)

# Counting the number of three ratings in the edx dataset
threes_count <- sum(edx$rating == 3)

# Q3 

# Count the number of unique movies in the edx dataset
unique_movies_count <- length(unique(edx$movieId))

# Q4 
# Count the number of unique users in the edx dataset
unique_users_count <- length(unique(edx$userId))

# Q5 
# Count of movie ratings for the Drama genre
drama_count <- sum(edx$genres %>% grepl("Drama", .))

# Count of movie ratings for the Comedy genre
comedy_count <- sum(edx$genres %>% grepl("Comedy", .))

# Count of movie ratings for the Thriller genre
thriller_count <- sum(edx$genres %>% grepl("Thriller", .))

# Count of movie ratings for the Romance genre
romance_count <- sum(edx$genres %>% grepl("Romance", .))

# Q6 
# Summarize to count ratings per movie and find the one with the maximum number
movie_ratings_count <- edx %>%
  group_by(title) %>%  # Grouping by movie title to make results more interpretable
  summarise(rating_count = n()) %>%
  arrange(desc(rating_count)) %>%
  top_n(1, rating_count)

# Q7
# Summarize to count occurrences of each rating and sort them in descending order
ratings_summary <- edx %>%
  group_by(rating) %>%
  summarise(count = n()) %>%
  arrange(desc(count))

# Display the top 5 most frequent ratings
top_five_ratings <- head(ratings_summary, 5)

# Q8 
# Summarize to count occurrences of each rating
ratings_summary <- edx %>%
  group_by(rating) %>%
  summarise(count = n()) %>%
  arrange(rating)

# Filter half-star and whole-star ratings
half_star_ratings <- filter(ratings_summary, rating %% 1 == 0.5)
whole_star_ratings <- filter(ratings_summary, rating %% 1 == 0)

# Compare if half-stars are generally less than whole-stars
less_common_half_stars <- all(half_star_ratings$count < whole_star_ratings$count)


```

